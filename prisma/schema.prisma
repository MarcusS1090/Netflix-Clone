// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//aqui vamos a hacer nuestras base de datos

//esto es el modelo para el usuario
model User {
  id                      String @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  image                   String?
  email                   String? @unique
  emailVerified           DateTime?
  hashedPassword          String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  favoriteIds             String[] @db.ObjectId
  sessions                Session[]
  accounts                Account[]
}

//esto es el modo para cuando iniciamos sesion con google o github
model Account {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String @db.ObjectId
  type                   String
  provider               String
  providerAccountId      String
  refresh_token          String? @db.String
  access_token           String? @db.String
  expires_at             Int?
  token_type             String?
  scope                  String?
  id_token               String? @db.String
  session_state          String?

//estamos conectando nuestro user model con nuestro account model usando los campos de userId
// que va a referenciar el id de user id, onDelete solo hace el uso del metodo en que se va
//a referenciar la eliminacion del user de la base de datos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider,providerAccountId])
}

//este es el model para cuando iniciamos sesion y nos dan un token
model Session {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken           String @unique
  userId                 String @db.ObjectId
  expires                DateTime

  use User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//este model verificamos el token de sesion
model VerificationToken {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  identifier             String
  token                  String @unique
  expires                DateTime

  @@unique([identifier, token])
}

//este model es para la pelicula
model Movie {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  title                  String
  description            String
  videoUrl               String
  thumbnailUrl           String
  genre                  String
  duration               String
}